services:
  postgresql:
    image: docker.io/library/postgres:12-alpine
    container_name: authentik-postgresql
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}']
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      offline:
  redis:
    image: docker.io/library/redis:alpine
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      offline:
  server:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik-server
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - /mnt/config/containers/authentik/media:/media
      - /mnt/config/containers/authentik/custom-templates:/templates
    labels:
      traefik.enable: 'true'
      traefik.http.routers.authentik.service: 'authentik'
      traefik.http.routers.authentik.entrypoints: 'https'
      traefik.http.routers.authentik.rule: ${AUTHENTIK_TRAEFIK_RULE}
      traefik.http.routers.authentik.tls: 'true'
      traefik.http.routers.authentik.tls.certresolver: 'production'
      traefik.http.services.authentik.loadbalancer.server.port: '9000'
    depends_on:
      - postgresql
      - redis
    networks:
      macvlan:
      offline:
  worker:
    image: ghcr.io/goauthentik/server:2024.2.2
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${POSTGRES_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/config/containers/authentik/media:/media
      - /mnt/config/containers/authentik/certs:/certs
      - /mnt/config/containers/authentik/custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      offline:

volumes:
  database:
    driver: local
  redis:
    driver: local

networks:
  macvlan:
    name: macvlan-network
    external: true
  offline:
    name: offline
    external: true
